/**
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddLoginDefaultResponse from '../com.alterian.auth.model/AddLoginDefaultResponse';
import AddLoginRequest from '../com.alterian.auth.model/AddLoginRequest';
import DisableLoginRequest from '../com.alterian.auth.model/DisableLoginRequest';
import EnableLoginRequest from '../com.alterian.auth.model/EnableLoginRequest';
import GetCurrentLoginDefaultResponse from '../com.alterian.auth.model/GetCurrentLoginDefaultResponse';
import GetLoginRequest from '../com.alterian.auth.model/GetLoginRequest';
import GetLoginsDefaultResponse from '../com.alterian.auth.model/GetLoginsDefaultResponse';
import GetLoginsRequest from '../com.alterian.auth.model/GetLoginsRequest';
import LogoutDefaultResponse from '../com.alterian.auth.model/LogoutDefaultResponse';
import RenameLoginRequest from '../com.alterian.auth.model/RenameLoginRequest';
import UpdateLoginExRequest from '../com.alterian.auth.model/UpdateLoginExRequest';

/**
* Logins service.
* @module api/LoginsApi
* @version 6.35.0
*/
export default class LoginsApi {

    /**
    * Constructs a new LoginsApi. 
    * @alias module:api/LoginsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add a login into the system
     * Add a login into the system
     * @param {module:com.alterian.auth.model/AddLoginRequest} addLoginRequest Add a login into the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/AddLoginDefaultResponse} and HTTP response
     */
    addLoginWithHttpInfo(addLoginRequest) {
      let postBody = addLoginRequest;
      // verify the required parameter 'addLoginRequest' is set
      if (addLoginRequest === undefined || addLoginRequest === null) {
        throw new Error("Missing the required parameter 'addLoginRequest' when calling addLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddLoginDefaultResponse;
      return this.apiClient.callApi(
        '/AddLogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a login into the system
     * Add a login into the system
     * @param {module:com.alterian.auth.model/AddLoginRequest} addLoginRequest Add a login into the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/AddLoginDefaultResponse}
     */
    addLogin(addLoginRequest) {
      return this.addLoginWithHttpInfo(addLoginRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Flag a login as disabled
     * Flag a login as disabled
     * @param {module:com.alterian.auth.model/DisableLoginRequest} disableLoginRequest Flag a login as disabled
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse} and HTTP response
     */
    disableLoginWithHttpInfo(disableLoginRequest) {
      let postBody = disableLoginRequest;
      // verify the required parameter 'disableLoginRequest' is set
      if (disableLoginRequest === undefined || disableLoginRequest === null) {
        throw new Error("Missing the required parameter 'disableLoginRequest' when calling disableLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogoutDefaultResponse;
      return this.apiClient.callApi(
        '/DisableLogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Flag a login as disabled
     * Flag a login as disabled
     * @param {module:com.alterian.auth.model/DisableLoginRequest} disableLoginRequest Flag a login as disabled
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse}
     */
    disableLogin(disableLoginRequest) {
      return this.disableLoginWithHttpInfo(disableLoginRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
     * Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
     * @param {module:com.alterian.auth.model/EnableLoginRequest} enableLoginRequest Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse} and HTTP response
     */
    enableLoginWithHttpInfo(enableLoginRequest) {
      let postBody = enableLoginRequest;
      // verify the required parameter 'enableLoginRequest' is set
      if (enableLoginRequest === undefined || enableLoginRequest === null) {
        throw new Error("Missing the required parameter 'enableLoginRequest' when calling enableLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogoutDefaultResponse;
      return this.apiClient.callApi(
        '/EnableLogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
     * Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
     * @param {module:com.alterian.auth.model/EnableLoginRequest} enableLoginRequest Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse}
     */
    enableLogin(enableLoginRequest) {
      return this.enableLoginWithHttpInfo(enableLoginRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns back info on the current login
     * Returns back info on the current login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/GetCurrentLoginDefaultResponse} and HTTP response
     */
    getCurrentLoginWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCurrentLoginDefaultResponse;
      return this.apiClient.callApi(
        '/GetCurrentLogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns back info on the current login
     * Returns back info on the current login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/GetCurrentLoginDefaultResponse}
     */
    getCurrentLogin() {
      return this.getCurrentLoginWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return back info on a single login
     * Return back info on a single login
     * @param {module:com.alterian.auth.model/GetLoginRequest} getLoginRequest Return back info on a single login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/GetCurrentLoginDefaultResponse} and HTTP response
     */
    getLoginWithHttpInfo(getLoginRequest) {
      let postBody = getLoginRequest;
      // verify the required parameter 'getLoginRequest' is set
      if (getLoginRequest === undefined || getLoginRequest === null) {
        throw new Error("Missing the required parameter 'getLoginRequest' when calling getLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCurrentLoginDefaultResponse;
      return this.apiClient.callApi(
        '/GetLogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Return back info on a single login
     * Return back info on a single login
     * @param {module:com.alterian.auth.model/GetLoginRequest} getLoginRequest Return back info on a single login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/GetCurrentLoginDefaultResponse}
     */
    getLogin(getLoginRequest) {
      return this.getLoginWithHttpInfo(getLoginRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
     * Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
     * @param {module:com.alterian.auth.model/GetLoginsRequest} getLoginsRequest Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/GetLoginsDefaultResponse} and HTTP response
     */
    getLoginsWithHttpInfo(getLoginsRequest) {
      let postBody = getLoginsRequest;
      // verify the required parameter 'getLoginsRequest' is set
      if (getLoginsRequest === undefined || getLoginsRequest === null) {
        throw new Error("Missing the required parameter 'getLoginsRequest' when calling getLogins");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetLoginsDefaultResponse;
      return this.apiClient.callApi(
        '/GetLogins', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
     * Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
     * @param {module:com.alterian.auth.model/GetLoginsRequest} getLoginsRequest Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/GetLoginsDefaultResponse}
     */
    getLogins(getLoginsRequest) {
      return this.getLoginsWithHttpInfo(getLoginsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Renames a login
     * Renames a login
     * @param {module:com.alterian.auth.model/RenameLoginRequest} renameLoginRequest Renames a login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse} and HTTP response
     */
    renameLoginWithHttpInfo(renameLoginRequest) {
      let postBody = renameLoginRequest;
      // verify the required parameter 'renameLoginRequest' is set
      if (renameLoginRequest === undefined || renameLoginRequest === null) {
        throw new Error("Missing the required parameter 'renameLoginRequest' when calling renameLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogoutDefaultResponse;
      return this.apiClient.callApi(
        '/RenameLogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Renames a login
     * Renames a login
     * @param {module:com.alterian.auth.model/RenameLoginRequest} renameLoginRequest Renames a login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse}
     */
    renameLogin(renameLoginRequest) {
      return this.renameLoginWithHttpInfo(renameLoginRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a login
     * Update a login
     * @param {module:com.alterian.auth.model/AddLoginRequest} addLoginRequest Update a login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse} and HTTP response
     */
    updateLoginWithHttpInfo(addLoginRequest) {
      let postBody = addLoginRequest;
      // verify the required parameter 'addLoginRequest' is set
      if (addLoginRequest === undefined || addLoginRequest === null) {
        throw new Error("Missing the required parameter 'addLoginRequest' when calling updateLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogoutDefaultResponse;
      return this.apiClient.callApi(
        '/UpdateLogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a login
     * Update a login
     * @param {module:com.alterian.auth.model/AddLoginRequest} addLoginRequest Update a login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse}
     */
    updateLogin(addLoginRequest) {
      return this.updateLoginWithHttpInfo(addLoginRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates pieces of a login
     * Updates pieces of a login
     * @param {module:com.alterian.auth.model/UpdateLoginExRequest} updateLoginExRequest Updates pieces of a login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse} and HTTP response
     */
    updateLoginExWithHttpInfo(updateLoginExRequest) {
      let postBody = updateLoginExRequest;
      // verify the required parameter 'updateLoginExRequest' is set
      if (updateLoginExRequest === undefined || updateLoginExRequest === null) {
        throw new Error("Missing the required parameter 'updateLoginExRequest' when calling updateLoginEx");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogoutDefaultResponse;
      return this.apiClient.callApi(
        '/UpdateLoginEx', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates pieces of a login
     * Updates pieces of a login
     * @param {module:com.alterian.auth.model/UpdateLoginExRequest} updateLoginExRequest Updates pieces of a login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse}
     */
    updateLoginEx(updateLoginExRequest) {
      return this.updateLoginExWithHttpInfo(updateLoginExRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
