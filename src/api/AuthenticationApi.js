/**
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplicationLoginDefaultResponse from '../com.alterian.auth.model/ApplicationLoginDefaultResponse';
import ApplicationLoginRequest from '../com.alterian.auth.model/ApplicationLoginRequest';
import FormsAuthenticationDefaultResponse from '../com.alterian.auth.model/FormsAuthenticationDefaultResponse';
import FormsAuthenticationRequest from '../com.alterian.auth.model/FormsAuthenticationRequest';
import GetIdentityUrlDefaultResponse from '../com.alterian.auth.model/GetIdentityUrlDefaultResponse';
import GetIdentityUrlRequest from '../com.alterian.auth.model/GetIdentityUrlRequest';
import GetSiteDetailsRequest from '../com.alterian.auth.model/GetSiteDetailsRequest';
import LogoutDefaultResponse from '../com.alterian.auth.model/LogoutDefaultResponse';
import SAMLAuthenticationRequest from '../com.alterian.auth.model/SAMLAuthenticationRequest';

/**
* Authentication service.
* @module api/AuthenticationApi
* @version 6.35.0
*/
export default class AuthenticationApi {

    /**
    * Constructs a new AuthenticationApi. 
    * @alias module:api/AuthenticationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * this method requests the auth server give you a token for a particular \"application\"
     * this method requests the auth server give you a token for a particular \"application\"
     * @param {module:com.alterian.auth.model/ApplicationLoginRequest} applicationLoginRequest this method requests the auth server give you a token for a particular \"application\"
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/ApplicationLoginDefaultResponse} and HTTP response
     */
    applicationLoginWithHttpInfo(applicationLoginRequest) {
      let postBody = applicationLoginRequest;
      // verify the required parameter 'applicationLoginRequest' is set
      if (applicationLoginRequest === undefined || applicationLoginRequest === null) {
        throw new Error("Missing the required parameter 'applicationLoginRequest' when calling applicationLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApplicationLoginDefaultResponse;
      return this.apiClient.callApi(
        '/ApplicationLogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * this method requests the auth server give you a token for a particular \"application\"
     * this method requests the auth server give you a token for a particular \"application\"
     * @param {module:com.alterian.auth.model/ApplicationLoginRequest} applicationLoginRequest this method requests the auth server give you a token for a particular \"application\"
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/ApplicationLoginDefaultResponse}
     */
    applicationLogin(applicationLoginRequest) {
      return this.applicationLoginWithHttpInfo(applicationLoginRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
     * Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
     * @param {module:com.alterian.auth.model/FormsAuthenticationRequest} formsAuthenticationRequest Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/FormsAuthenticationDefaultResponse} and HTTP response
     */
    formsAuthenticationWithHttpInfo(formsAuthenticationRequest) {
      let postBody = formsAuthenticationRequest;
      // verify the required parameter 'formsAuthenticationRequest' is set
      if (formsAuthenticationRequest === undefined || formsAuthenticationRequest === null) {
        throw new Error("Missing the required parameter 'formsAuthenticationRequest' when calling formsAuthentication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FormsAuthenticationDefaultResponse;
      return this.apiClient.callApi(
        '/FormsAuthentication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
     * Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
     * @param {module:com.alterian.auth.model/FormsAuthenticationRequest} formsAuthenticationRequest Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/FormsAuthenticationDefaultResponse}
     */
    formsAuthentication(formsAuthenticationRequest) {
      return this.formsAuthenticationWithHttpInfo(formsAuthenticationRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * 
     * @param {module:com.alterian.auth.model/GetIdentityUrlRequest} getIdentityUrlRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/GetIdentityUrlDefaultResponse} and HTTP response
     */
    getIdentityUrlWithHttpInfo(getIdentityUrlRequest) {
      let postBody = getIdentityUrlRequest;
      // verify the required parameter 'getIdentityUrlRequest' is set
      if (getIdentityUrlRequest === undefined || getIdentityUrlRequest === null) {
        throw new Error("Missing the required parameter 'getIdentityUrlRequest' when calling getIdentityUrl");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetIdentityUrlDefaultResponse;
      return this.apiClient.callApi(
        '/GetIdentityUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 
     * 
     * @param {module:com.alterian.auth.model/GetIdentityUrlRequest} getIdentityUrlRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/GetIdentityUrlDefaultResponse}
     */
    getIdentityUrl(getIdentityUrlRequest) {
      return this.getIdentityUrlWithHttpInfo(getIdentityUrlRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
     * Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
     * @param {module:com.alterian.auth.model/GetSiteDetailsRequest} getSiteDetailsRequest Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/ApplicationLoginDefaultResponse} and HTTP response
     */
    getSiteDetailsWithHttpInfo(getSiteDetailsRequest) {
      let postBody = getSiteDetailsRequest;
      // verify the required parameter 'getSiteDetailsRequest' is set
      if (getSiteDetailsRequest === undefined || getSiteDetailsRequest === null) {
        throw new Error("Missing the required parameter 'getSiteDetailsRequest' when calling getSiteDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApplicationLoginDefaultResponse;
      return this.apiClient.callApi(
        '/GetSiteDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
     * Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
     * @param {module:com.alterian.auth.model/GetSiteDetailsRequest} getSiteDetailsRequest Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/ApplicationLoginDefaultResponse}
     */
    getSiteDetails(getSiteDetailsRequest) {
      return this.getSiteDetailsWithHttpInfo(getSiteDetailsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
     * Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse} and HTTP response
     */
    logoutWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogoutDefaultResponse;
      return this.apiClient.callApi(
        '/Logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
     * Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse}
     */
    logout() {
      return this.logoutWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
     * If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/FormsAuthenticationDefaultResponse} and HTTP response
     */
    nTLMAuthenticationWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FormsAuthenticationDefaultResponse;
      return this.apiClient.callApi(
        '/NTLMAuthentication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
     * If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/FormsAuthenticationDefaultResponse}
     */
    nTLMAuthentication() {
      return this.nTLMAuthenticationWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
     * Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
     * @param {Object} opts Optional parameters
     * @param {String} [code] 
     * @param {String} [state] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    openIdAuthenticationWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Code': opts['code'],
        'State': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/OpenIdAuthentication', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
     * Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
     * @param {Object} opts Optional parameters
     * @param {String} opts.code 
     * @param {String} opts.state 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    openIdAuthentication(opts) {
      return this.openIdAuthenticationWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
     * Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
     * @param {module:com.alterian.auth.model/SAMLAuthenticationRequest} sAMLAuthenticationRequest Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/FormsAuthenticationDefaultResponse} and HTTP response
     */
    sAMLAuthenticationWithHttpInfo(sAMLAuthenticationRequest) {
      let postBody = sAMLAuthenticationRequest;
      // verify the required parameter 'sAMLAuthenticationRequest' is set
      if (sAMLAuthenticationRequest === undefined || sAMLAuthenticationRequest === null) {
        throw new Error("Missing the required parameter 'sAMLAuthenticationRequest' when calling sAMLAuthentication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FormsAuthenticationDefaultResponse;
      return this.apiClient.callApi(
        '/SAMLAuthentication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
     * Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
     * @param {module:com.alterian.auth.model/SAMLAuthenticationRequest} sAMLAuthenticationRequest Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/FormsAuthenticationDefaultResponse}
     */
    sAMLAuthentication(sAMLAuthenticationRequest) {
      return this.sAMLAuthenticationWithHttpInfo(sAMLAuthenticationRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
