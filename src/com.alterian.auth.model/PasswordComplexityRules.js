/**
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PasswordComplexityRules model module.
 * @module com.alterian.auth.model/PasswordComplexityRules
 * @version 6.35.0
 */
class PasswordComplexityRules {
    /**
     * Constructs a new <code>PasswordComplexityRules</code>.
     * 
     * @alias module:com.alterian.auth.model/PasswordComplexityRules
     */
    constructor() { 
        
        PasswordComplexityRules.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PasswordComplexityRules</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.auth.model/PasswordComplexityRules} obj Optional instance to populate.
     * @return {module:com.alterian.auth.model/PasswordComplexityRules} The populated <code>PasswordComplexityRules</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PasswordComplexityRules();

            if (data.hasOwnProperty('MinimumLength')) {
                obj['MinimumLength'] = ApiClient.convertToType(data['MinimumLength'], 'Blob');
            }
            if (data.hasOwnProperty('NumChars')) {
                obj['NumChars'] = ApiClient.convertToType(data['NumChars'], 'Blob');
            }
            if (data.hasOwnProperty('NumNumeric')) {
                obj['NumNumeric'] = ApiClient.convertToType(data['NumNumeric'], 'Blob');
            }
            if (data.hasOwnProperty('NumSpecial')) {
                obj['NumSpecial'] = ApiClient.convertToType(data['NumSpecial'], 'Blob');
            }
            if (data.hasOwnProperty('RequireMixedCase')) {
                obj['RequireMixedCase'] = ApiClient.convertToType(data['RequireMixedCase'], 'Boolean');
            }
            if (data.hasOwnProperty('PasswordReuse')) {
                obj['PasswordReuse'] = ApiClient.convertToType(data['PasswordReuse'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PasswordComplexityRules</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PasswordComplexityRules</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Total minimum length of password
 * @member {Blob} MinimumLength
 */
PasswordComplexityRules.prototype['MinimumLength'] = undefined;

/**
 * Minimum number of non-numeric, non-special characters
 * @member {Blob} NumChars
 */
PasswordComplexityRules.prototype['NumChars'] = undefined;

/**
 * Minimum number of numeric values in password
 * @member {Blob} NumNumeric
 */
PasswordComplexityRules.prototype['NumNumeric'] = undefined;

/**
 * Minimum number of special characters in password (special characters include %[`!@#$%&*()_=+\\|{};\",/])
 * @member {Blob} NumSpecial
 */
PasswordComplexityRules.prototype['NumSpecial'] = undefined;

/**
 * Are Upper and Lower case characters required
 * @member {Boolean} RequireMixedCase
 */
PasswordComplexityRules.prototype['RequireMixedCase'] = undefined;

/**
 * Can the password be changed to a previously used value
 * @member {Blob} PasswordReuse
 */
PasswordComplexityRules.prototype['PasswordReuse'] = undefined;






export default PasswordComplexityRules;

