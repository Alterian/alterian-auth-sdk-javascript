/**
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangePasswordRequest from '../com.alterian.auth.model/ChangePasswordRequest';
import ExpirePasswordRequest from '../com.alterian.auth.model/ExpirePasswordRequest';
import GetPasswordComplexityRulesDefaultResponse from '../com.alterian.auth.model/GetPasswordComplexityRulesDefaultResponse';
import LogoutDefaultResponse from '../com.alterian.auth.model/LogoutDefaultResponse';

/**
* Passwords service.
* @module api/PasswordsApi
* @version 6.35.0
*/
export default class PasswordsApi {

    /**
    * Constructs a new PasswordsApi. 
    * @alias module:api/PasswordsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Changes a login's password
     * Changes a login's password
     * @param {module:com.alterian.auth.model/ChangePasswordRequest} changePasswordRequest Changes a login's password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse} and HTTP response
     */
    changePasswordWithHttpInfo(changePasswordRequest) {
      let postBody = changePasswordRequest;
      // verify the required parameter 'changePasswordRequest' is set
      if (changePasswordRequest === undefined || changePasswordRequest === null) {
        throw new Error("Missing the required parameter 'changePasswordRequest' when calling changePassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogoutDefaultResponse;
      return this.apiClient.callApi(
        '/ChangePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Changes a login's password
     * Changes a login's password
     * @param {module:com.alterian.auth.model/ChangePasswordRequest} changePasswordRequest Changes a login's password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse}
     */
    changePassword(changePasswordRequest) {
      return this.changePasswordWithHttpInfo(changePasswordRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in.
     * Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in.
     * @param {module:com.alterian.auth.model/ExpirePasswordRequest} expirePasswordRequest Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse} and HTTP response
     */
    expirePasswordWithHttpInfo(expirePasswordRequest) {
      let postBody = expirePasswordRequest;
      // verify the required parameter 'expirePasswordRequest' is set
      if (expirePasswordRequest === undefined || expirePasswordRequest === null) {
        throw new Error("Missing the required parameter 'expirePasswordRequest' when calling expirePassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogoutDefaultResponse;
      return this.apiClient.callApi(
        '/ExpirePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in.
     * Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in.
     * @param {module:com.alterian.auth.model/ExpirePasswordRequest} expirePasswordRequest Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse}
     */
    expirePassword(expirePasswordRequest) {
      return this.expirePasswordWithHttpInfo(expirePasswordRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns back the password complexity rules for use in a GUI.  These rules are also applied on the backend.
     * Returns back the password complexity rules for use in a GUI.  These rules are also applied on the backend.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/GetPasswordComplexityRulesDefaultResponse} and HTTP response
     */
    getPasswordComplexityRulesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPasswordComplexityRulesDefaultResponse;
      return this.apiClient.callApi(
        '/GetPasswordComplexityRules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns back the password complexity rules for use in a GUI.  These rules are also applied on the backend.
     * Returns back the password complexity rules for use in a GUI.  These rules are also applied on the backend.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/GetPasswordComplexityRulesDefaultResponse}
     */
    getPasswordComplexityRules() {
      return this.getPasswordComplexityRulesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
