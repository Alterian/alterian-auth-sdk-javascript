/**
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddCertificateDefaultResponse from '../com.alterian.auth.model/AddCertificateDefaultResponse';
import AddCertificateRequest from '../com.alterian.auth.model/AddCertificateRequest';
import DeleteCertificateRequest from '../com.alterian.auth.model/DeleteCertificateRequest';
import GetCertificateDefaultResponse from '../com.alterian.auth.model/GetCertificateDefaultResponse';
import GetCertificateRequest from '../com.alterian.auth.model/GetCertificateRequest';
import GetCertificatesDefaultResponse from '../com.alterian.auth.model/GetCertificatesDefaultResponse';
import GetCertificatesRequest from '../com.alterian.auth.model/GetCertificatesRequest';
import LogoutDefaultResponse from '../com.alterian.auth.model/LogoutDefaultResponse';
import UpdateCertificateRequest from '../com.alterian.auth.model/UpdateCertificateRequest';

/**
* Certificates service.
* @module api/CertificatesApi
* @version 6.35.0
*/
export default class CertificatesApi {

    /**
    * Constructs a new CertificatesApi. 
    * @alias module:api/CertificatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Adds a certificate for use with single sign on
     * Adds a certificate for use with single sign on
     * @param {module:com.alterian.auth.model/AddCertificateRequest} addCertificateRequest Adds a certificate for use with single sign on
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/AddCertificateDefaultResponse} and HTTP response
     */
    addCertificateWithHttpInfo(addCertificateRequest) {
      let postBody = addCertificateRequest;
      // verify the required parameter 'addCertificateRequest' is set
      if (addCertificateRequest === undefined || addCertificateRequest === null) {
        throw new Error("Missing the required parameter 'addCertificateRequest' when calling addCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddCertificateDefaultResponse;
      return this.apiClient.callApi(
        '/AddCertificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Adds a certificate for use with single sign on
     * Adds a certificate for use with single sign on
     * @param {module:com.alterian.auth.model/AddCertificateRequest} addCertificateRequest Adds a certificate for use with single sign on
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/AddCertificateDefaultResponse}
     */
    addCertificate(addCertificateRequest) {
      return this.addCertificateWithHttpInfo(addCertificateRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the specified certificate
     * Deletes the specified certificate
     * @param {module:com.alterian.auth.model/DeleteCertificateRequest} deleteCertificateRequest Deletes the specified certificate
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse} and HTTP response
     */
    deleteCertificateWithHttpInfo(deleteCertificateRequest) {
      let postBody = deleteCertificateRequest;
      // verify the required parameter 'deleteCertificateRequest' is set
      if (deleteCertificateRequest === undefined || deleteCertificateRequest === null) {
        throw new Error("Missing the required parameter 'deleteCertificateRequest' when calling deleteCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogoutDefaultResponse;
      return this.apiClient.callApi(
        '/DeleteCertificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the specified certificate
     * Deletes the specified certificate
     * @param {module:com.alterian.auth.model/DeleteCertificateRequest} deleteCertificateRequest Deletes the specified certificate
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse}
     */
    deleteCertificate(deleteCertificateRequest) {
      return this.deleteCertificateWithHttpInfo(deleteCertificateRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets the specified certificate
     * Gets the specified certificate
     * @param {module:com.alterian.auth.model/GetCertificateRequest} getCertificateRequest Gets the specified certificate
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/GetCertificateDefaultResponse} and HTTP response
     */
    getCertificateWithHttpInfo(getCertificateRequest) {
      let postBody = getCertificateRequest;
      // verify the required parameter 'getCertificateRequest' is set
      if (getCertificateRequest === undefined || getCertificateRequest === null) {
        throw new Error("Missing the required parameter 'getCertificateRequest' when calling getCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCertificateDefaultResponse;
      return this.apiClient.callApi(
        '/GetCertificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets the specified certificate
     * Gets the specified certificate
     * @param {module:com.alterian.auth.model/GetCertificateRequest} getCertificateRequest Gets the specified certificate
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/GetCertificateDefaultResponse}
     */
    getCertificate(getCertificateRequest) {
      return this.getCertificateWithHttpInfo(getCertificateRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a list of available certificates
     * Gets a list of available certificates
     * @param {module:com.alterian.auth.model/GetCertificatesRequest} getCertificatesRequest Gets a list of available certificates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/GetCertificatesDefaultResponse} and HTTP response
     */
    getCertificatesWithHttpInfo(getCertificatesRequest) {
      let postBody = getCertificatesRequest;
      // verify the required parameter 'getCertificatesRequest' is set
      if (getCertificatesRequest === undefined || getCertificatesRequest === null) {
        throw new Error("Missing the required parameter 'getCertificatesRequest' when calling getCertificates");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCertificatesDefaultResponse;
      return this.apiClient.callApi(
        '/GetCertificates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a list of available certificates
     * Gets a list of available certificates
     * @param {module:com.alterian.auth.model/GetCertificatesRequest} getCertificatesRequest Gets a list of available certificates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/GetCertificatesDefaultResponse}
     */
    getCertificates(getCertificatesRequest) {
      return this.getCertificatesWithHttpInfo(getCertificatesRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates information associated with a certificate
     * Updates information associated with a certificate
     * @param {module:com.alterian.auth.model/UpdateCertificateRequest} updateCertificateRequest Updates information associated with a certificate
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse} and HTTP response
     */
    updateCertificateWithHttpInfo(updateCertificateRequest) {
      let postBody = updateCertificateRequest;
      // verify the required parameter 'updateCertificateRequest' is set
      if (updateCertificateRequest === undefined || updateCertificateRequest === null) {
        throw new Error("Missing the required parameter 'updateCertificateRequest' when calling updateCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogoutDefaultResponse;
      return this.apiClient.callApi(
        '/UpdateCertificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates information associated with a certificate
     * Updates information associated with a certificate
     * @param {module:com.alterian.auth.model/UpdateCertificateRequest} updateCertificateRequest Updates information associated with a certificate
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.auth.model/LogoutDefaultResponse}
     */
    updateCertificate(updateCertificateRequest) {
      return this.updateCertificateWithHttpInfo(updateCertificateRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
