/**
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SettingValue from './SettingValue';

/**
 * The LoginInfo model module.
 * @module com.alterian.auth.model/LoginInfo
 * @version 6.35.0
 */
class LoginInfo {
    /**
     * Constructs a new <code>LoginInfo</code>.
     * Info for a particular login
     * @alias module:com.alterian.auth.model/LoginInfo
     */
    constructor() { 
        
        LoginInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoginInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.auth.model/LoginInfo} obj Optional instance to populate.
     * @return {module:com.alterian.auth.model/LoginInfo} The populated <code>LoginInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoginInfo();

            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('WindowsAuthentication')) {
                obj['WindowsAuthentication'] = ApiClient.convertToType(data['WindowsAuthentication'], 'Boolean');
            }
            if (data.hasOwnProperty('Settings')) {
                obj['Settings'] = ApiClient.convertToType(data['Settings'], [SettingValue]);
            }
            if (data.hasOwnProperty('NewPassword')) {
                obj['NewPassword'] = ApiClient.convertToType(data['NewPassword'], 'String');
            }
            if (data.hasOwnProperty('Enabled')) {
                obj['Enabled'] = ApiClient.convertToType(data['Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('PasswordExpires')) {
                obj['PasswordExpires'] = ApiClient.convertToType(data['PasswordExpires'], 'Date');
            }
            if (data.hasOwnProperty('LastLogin')) {
                obj['LastLogin'] = ApiClient.convertToType(data['LastLogin'], 'Date');
            }
            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'Date');
            }
            if (data.hasOwnProperty('Modified')) {
                obj['Modified'] = ApiClient.convertToType(data['Modified'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoginInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoginInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ID'] && !(typeof data['ID'] === 'string' || data['ID'] instanceof String)) {
            throw new Error("Expected the field `ID` to be a primitive type in the JSON string but got " + data['ID']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        if (data['Settings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Settings'])) {
                throw new Error("Expected the field `Settings` to be an array in the JSON data but got " + data['Settings']);
            }
            // validate the optional field `Settings` (array)
            for (const item of data['Settings']) {
                SettingValue.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['NewPassword'] && !(typeof data['NewPassword'] === 'string' || data['NewPassword'] instanceof String)) {
            throw new Error("Expected the field `NewPassword` to be a primitive type in the JSON string but got " + data['NewPassword']);
        }

        return true;
    }


}



/**
 * Id of the login
 * @member {String} ID
 */
LoginInfo.prototype['ID'] = undefined;

/**
 * The login name
 * @member {String} Name
 */
LoginInfo.prototype['Name'] = undefined;

/**
 * Does this login use external authentication?
 * @member {Boolean} WindowsAuthentication
 */
LoginInfo.prototype['WindowsAuthentication'] = undefined;

/**
 * Settings for this login
 * @member {Array.<module:com.alterian.auth.model/SettingValue>} Settings
 */
LoginInfo.prototype['Settings'] = undefined;

/**
 * If you want to update the password for a login, include a NewPassword.  You can use this in a call to @see(UpdateLogin)
 * @member {String} NewPassword
 */
LoginInfo.prototype['NewPassword'] = undefined;

/**
 * Is this login flagged as disabled
 * @member {Boolean} Enabled
 */
LoginInfo.prototype['Enabled'] = undefined;

/**
 * If set, this is when the password for this login will expire.  Any changes to this will be compared to the password policy
 * @member {Date} PasswordExpires
 */
LoginInfo.prototype['PasswordExpires'] = undefined;

/**
 * Last time this login was used
 * @member {Date} LastLogin
 */
LoginInfo.prototype['LastLogin'] = undefined;

/**
 * When was this login created
 * @member {Date} Created
 */
LoginInfo.prototype['Created'] = undefined;

/**
 * Last time this login was modified
 * @member {Date} Modified
 */
LoginInfo.prototype['Modified'] = undefined;






export default LoginInfo;

